---
title: "example"
author: "Mey Siv"
editor: visual
format: 
  html: 
    theme: cerulean
  pdf: default
execute:
    echo: true
    warning: false
    message: false
---

## This is a written guide on how to use git, Github and the command line interface!

### 1. Create a qmd file that can be knitted into a html file.

```{r}
#| label: fig-html
#| fig-cap: "qmd file kniited into a HTML file"
knitr::include_graphics("Screen Shot 2025-05-06 at 4.52.34 pm.png")

```

@fig-html shows a result of a example.qmd file that can be knitted into a html file. This can be achieve by adding "format: html" in the YAML header of the top of your example.qmd file to define metadata for your Quarto document.


### 2. Initialise the folder as a git repository and push it to the remote repo.

Initializing a folder locally and pushing it to GitHub is easier when starting a new project, as it avoids duplicating files and gives more control over what gets added to version control.

##### Here are the steps to achieve that:

1.  Create an empty repository on GitHub (without initializing it with a README, .gitignore, or license).

2.  Open a terminal and navigate to the location of your local folder that you want to synchronize with the remote repository (using cd ...).

3.  Stage and commit your changes with a meaningful commit message.

4.  Run the command "git remote add origin <your SSH URL from the remote repo>" to specify which remote repository you want to link your local repository to (this is the repository you created in step 1)

5.  After that, run "git push -u origin main" so your local folder is linked to the GitHub repository.

6.  Refresh your GitHub page, and you should see that your local repository is now reflected on the remote repository.


### 3. Create a new branch and add the modity file into both the local and remote repositories.

Creating a new branch from the main branch allows us to duplicate the main branch and make changes without affecting other branches in the repository. When collaborating, it is important to create branches for changes and merge them back into the main branch when the collaborators are ready.

##### Here are the steps to create new branch called "testbranch", make changes in the example.qmd file and sychronised both the local and remote repositories in the terminal:

1.  Run "git branch testbranch" to create a new branch from the main branch.

2.  Run "git branch" to check whether you have successfully created the new branch and to see which branch you are currently on.

3.  Run "git switch testbranch" to move the HEAD pointer to testbranch, isolating it from the main branch and allowing you to make changes.

4.  Always stage and commit your changes with a meaningful commit message.

5.  Run "git push origin testbranch" when you are ready to push local testbranch branch to the remote repository on GitHub.

6.  When the changes in the new branch are ready to be added back to the main branch, run "git switch main" to switch to the main branch where you want to apply the changes

7.  Run "git merge testbranch -m "Message"" to merge the changes from the new branch into the main branch.

8.  Run "git push origin main" to update the remote main branch on GitHub and synchronize both the local and remote branches.


### 4. Add a file to the data folder and amend the previous commit to include it

The command "git commit --amend -"message"" is used when you want to update the most recent commit, either by changing its commmit message, adding new changes or both. 

#### Here are the steps to amend the previous commit: 
1. Create and add a file to the data folder 
2. run "git add data/" to stage the data folder and its contents
3. run "git log --oneline" to check the recent commit hisotry
4. run "git commit --amend -m "message"" to update the most recent commit with the new messages and message
5. run ""git log --oneline" again to confirm that the commit message and content have been updated 
6. run "git push origin main" to update the commit on the remote repository. 


### 5. Modify example.qmd in a different way that will cause conflict with testbranch 



### 6. Resolve conflict with testbranch

Conflict happens when there are changes arise at the same line or parts of the file and so Git doesn't know which changes they should be implement.

#### Here are the steps on how does the conflict arise and what to do to resovle it:

1.  Switch to main branch and make changes on the example.qmd file














### 7. tag this commit v1.0 on main using an anotated tag 

Git tag can be used to record a specfic point in time in the repo histroy, you can view this as like a report mildstone.  

#### Here are the steps on how to add annotated tag 
1. run "git tag -a V1.0 -m "message"" to create a new anotated tag with label V1.0
2. run "git push origin V1.0" to add tag V1.0 on the remote repository  


### 8. Delete branch testbranch

Deleting the branch when you have already made the necessary changes and the main branch is updated with the new changes. 

#### Here are the steps to delete branch testbranch
1. run "git branch -d testbranch" to delete the branch locally on the repository 
2. run "git brach origin --delete testbranch" to delete the branch on Github repository
3. refresh your Github page, and you should see only one branch remaining which is main 


### 9. Show the commit log in condensed form in the terminal 

Run "git log --oneline" to view the commit history in a condensed form, which showing each commitâ€™s hash and message. This makes it easier to identify specific commits you may want to update or remove using their commit hash.


```{r}
#| label: fig-commit
#| fig-cap: "commit log in condensed form in the terminal"
knitr::include_graphics("Screen Shot 2025-05-09 at 12.12.30 pm.png")

```

#### @fig-commit Here is a example of the commit log in the terminal 


### 10. Make an easy plot, and undo the commit without losing your local changes 

Sometimes, a bad commit may be made, and unoding it can be help recover the work while keeping the necessary changes. 

#### Here are the steps to create a simple plot and undo the commit without affecting the local changes:

1. Add the follwoing code to example.qmd to make a simple plot: 
```{r}

#| warning: false 
#| fig-cap: "big legnth vs bill length"
#| fig-align: center
#|  echo: true

library(ggplot2)
ggplot(cars, 
       aes(x = speed, 
           y = dist)
       ) +
  geom_point()
```

2. stage and commit the new changes of the plot using "git add example.qmd" and "git commit -m "message""
3. run "git log --oneline" to check the recent commit history of the plot added 
4. to undo the most recent commit (HEAD~1) without losing your local changes, use one of the following commands:
* run "git reset --soft HEAD~1" to keep the changes staged (ready to recommit), or 
* run "git reset --mixed HEAD~1" to unstage the changes while keeping the local changes in your working directory 
5. if you run "git log --oneline" again, you'll see that the most recent commit has been removed, and the HEAD points is now pointing to the previous commit - as it the last commit never happened


